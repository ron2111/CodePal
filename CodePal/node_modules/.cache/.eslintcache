[{"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\index.js":"1","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\App.js":"2","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\reportWebVitals.js":"3","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\pages\\Home.js":"4","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\pages\\EditorPage.js":"5","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\socket.js":"6","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\Actions.js":"7","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\components\\Editor.js":"8","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\components\\Client.js":"9"},{"size":517,"mtime":1660767984256,"results":"10","hashOfConfig":"11"},{"size":1022,"mtime":1660767984249,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1660767984261,"results":"13","hashOfConfig":"11"},{"size":2926,"mtime":1660765219708,"results":"14","hashOfConfig":"11"},{"size":4544,"mtime":1660769389066,"results":"15","hashOfConfig":"11"},{"size":320,"mtime":1660767984262,"results":"16","hashOfConfig":"11"},{"size":212,"mtime":1660767984248,"results":"17","hashOfConfig":"11"},{"size":1864,"mtime":1660767984254,"results":"18","hashOfConfig":"11"},{"size":325,"mtime":1660767984253,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m1o7td",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\index.js",[],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\App.js",[],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\reportWebVitals.js",[],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\pages\\Home.js",["49"],[],"import React, { useState } from \"react\"; // rafce: boilerplate command\r\nimport { v4 as uuidV4 } from \"uuid\"; // uuid package downloaded to generate a unique id\r\nimport toast from \"react-hot-toast\"; // to show the room creation notification\r\nimport { useNavigate } from \"react-router-dom\"; // for redirection\r\n\r\nconst Home = () => {\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const navigate = useNavigate(); // redirection\r\n\r\n  const createNewRoom = (e) => {\r\n    e.preventDefault(); // to stop reloading of page when clicked on anchor tag\r\n    const id = uuidV4();\r\n    setRoomID(id);\r\n    toast.success(\"Created a new room\"); // success for green tick\r\n  };\r\n\r\n  const joinRoom = () => {\r\n    if (!roomID || !username) {\r\n      toast.error(\"ROOM ID & USERNAME is required\");\r\n      return;\r\n    }\r\n\r\n    // Redirect\r\n    navigate(`/editor/${roomID}`, {\r\n      state: {\r\n        /* to access the username variable even in another state */ username,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleInputEnter = (e) => {\r\n    // to join room even on pressing enter\r\n    if (e.code === \"Enter\") {\r\n      joinRoom();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"homePageWrapper\">\r\n      <div className=\"formWrapper\">\r\n        <img className=\"homePageLogo\" src=\"/code-pal.png\" alt=\"code-pal-logo\" />\r\n        <h4 className=\"mainLabel\">Paste invitation ROOM ID </h4>\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"ROOM ID\"\r\n            onChange={(e) => setRoomID(e.target.value)} // when we want to manually write the room id, then roomID variable is changed to that only\r\n            value={roomID}\r\n            // But, if we want to generate a new room automatically, then it can be done using the uuid funtion with useState Hook.\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputBox\"\r\n            placeholder=\"USERNAME\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            value={username}\r\n            onKeyUp={handleInputEnter}\r\n          />\r\n\r\n          <button className=\"btn joinBtn\" onClick={joinRoom}>\r\n            Join\r\n          </button>\r\n          {/* Two classes given to this button, to keep a general styple and a specific for join button only */}\r\n\r\n          <span className=\"createInfo\">\r\n            If you don't have an invite then create &nbsp;\r\n            <a onClick={createNewRoom} href=\"\" className=\"createNewBtn\">\r\n              new room\r\n            </a>\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <footer>\r\n        <h4>\r\n          Built with ðŸ’› by &nbsp;\r\n          <a href=\"https://github.com/ron2111\" target=\"/blank\">\r\n            Rohan Sharma\r\n          </a>\r\n        </h4>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\pages\\EditorPage.js",["50"],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\socket.js",[],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\Actions.js",[],[],"C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\components\\Editor.js",["51","52","53"],[],"import React, { useEffect, useRef } from 'react';\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\nimport ACTIONS from '../Actions';\r\n\r\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\r\n    const editorRef = useRef(null);\r\n    useEffect(() => {\r\n        async function init() {\r\n            editorRef.current = Codemirror.fromTextArea(\r\n                document.getElementById('realtimeEditor'),\r\n                {\r\n                    mode: { name: 'javascript', json: true },\r\n                    theme: 'dracula',\r\n                    autoCloseTags: true,\r\n                    autoCloseBrackets: true,\r\n                    lineNumbers: true,\r\n                }\r\n            );\r\n\r\n            editorRef.current.on('change', (instance, changes) => {\r\n                const { origin } = changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code);\r\n                if (origin !== 'setValue') {\r\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\r\n                        roomId,\r\n                        code,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        init();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (socketRef.current) {\r\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\r\n                if (code !== null) {\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\r\n        };\r\n    }, [socketRef.current]);\r\n\r\n    return <textarea id=\"realtimeEditor\"></textarea>;\r\n};\r\n\r\nexport default Editor;\r\n","C:\\Users\\91966\\OneDrive\\Desktop\\rce-cg\\CodePal\\src\\components\\Client.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":71,"column":13,"nodeType":"56","endLine":71,"endColumn":73},{"ruleId":"57","severity":1,"message":"58","line":74,"column":8,"nodeType":"59","endLine":74,"endColumn":10,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":38,"column":8,"nodeType":"59","endLine":38,"endColumn":10,"suggestions":"62"},{"ruleId":"57","severity":1,"message":"63","line":50,"column":23,"nodeType":"64","endLine":50,"endColumn":30},{"ruleId":"57","severity":1,"message":"65","line":52,"column":8,"nodeType":"59","endLine":52,"endColumn":27,"suggestions":"66"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"76","text":"77"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"78","text":"79"},"Update the dependencies array to be: [socketRef]",{"range":"80","text":"81"},[2626,2628],"[location.state?.username, reactNavigator, roomId]",[1376,1378],"[onCodeChange, roomId, socketRef]",[1754,1773],"[socketRef]"]